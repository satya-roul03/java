class linkAtFirst
{
    Node head;
    private int size;
    linkAtFirst()
    {
        this.size=0;
    }
    class Node
    {
        String data;
        Node next;
        Node(String data)
        {
            this.data=data;
            this.next=null;
            size++;
        }
    }
        public void addFirst(String data)
        {
            Node newNode=new Node(data);
            if(head== null)
            {
                head=newNode;
                return;
            }
            newNode.next=head;
            head=newNode;
        }
        public void addLast(String data)
        {
            Node newNode=new Node(data);
            if(head==null)
            {
                head=newNode;
                return;
            }
            Node currNode=head;
            while(currNode.next!=null)
            {
                currNode=currNode.next;
            }
            currNode.next=newNode;
        }
        public void printList()
        {
            if(head==null)
            {
                System.out.println("List is empty");
                return;
            }
            Node currNode=head;
            while(currNode != null)
            {
                System.out.print(currNode.data+"->");
                currNode=currNode.next;
            }
            System.out.println("NULL");
        }
        public void deleteFirst()
        {
            if(head==null)
            {
                System.out.println("List is empty");
                return; 
            }
            size--;
            head=head.next;
        }
        public void deleteLast()
        {
            if(head==null)
            {
                System.out.println("List is empty");
                return;
            }
            size--;
            if(head.next==null)
            {
                head=null;
                return;
            }
            Node secondLast=head;
            Node lastNode=head.next;
            while(lastNode.next!=null)
            {
                lastNode=lastNode.next;
                secondLast=secondLast.next;
            }
            secondLast.next=null;
        }
        public int getSize()
        {
            return size;
        }
        public void reverse()
        {
            if(head==null || head.next==null)
            {
                return;
            }
            Node curr=head.next;
            Node prv=head;
            while(curr != null)
            {
                Node nextN=curr.next;
                curr.next=prv;
                prv=curr;
                curr=nextN;
            }
            head.next=null;
            head=prv;
        }
    public static void main(String args[])
    {
        linkAtFirst list=new linkAtFirst();
        list.addFirst("a");
        list.addFirst("is");
        list.addFirst("It");
        list.printList();

        list.addLast("LinkedList");
        list.printList(); 

        list.deleteFirst();
        list.printList();

        list.deleteLast();
        list.printList();

        System.out.println(list.getSize());
        list.addLast("LinkedList");
         list.printList();
        System.out.println(list.getSize());
        list.reverse();
        list.printList();
    }
}
